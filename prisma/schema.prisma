// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Gender {
  Male
  Female
  Other
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Promocode {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  startTime       DateTime @map("start_time")
  endTime         DateTime @map("end_time")
  description     String
  discount        Float
  products        String[]
  isPublic        Boolean  @map("is_public")
  isShowCountdown Boolean  @map("is_show_countdown")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Quote     Quote[]

  @@map("promo_code")
}

model CusstomerInfo {
  id                        Int     @id @default(autoincrement())
  name                      String?
  vehicleRegistrationNumber String  @unique @map("vehicle_registration_number")
  sex                       String?
  country                   String?
  source                    String?
  isAllowedRenewal          Boolean @default(false) @map("is_allowed_renewal")
  isAllowedNewBiz           Boolean @default(false) @map("is_allowed_new_biz")
  nationalIdentityNo        String? @map("national_identity_no")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("customer_info")
}

model Quote {
  id       Int     @id @default(autoincrement())
  quoteId  String? @map("quote_id")
  quoteNo  String? @map("quote_no")
  policyId String? @map("policy_id")
  phone    String?
  email    String?
  name     String?
  data     Json?

  partnerCode    String?   @map("partner_code")
  isFinalized    Boolean   @default(false) @map("is_finalized")
  isPaid         Boolean   @default(false) @map("is_paid")
  expirationDate DateTime? @map("expiration_date")
  key            String
  ipAddress      String?   @map("ip_address")
  country        String?
  city           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  // Foreign Keys
  personalInfoId Int?          @map("personal_info_id")
  personalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id])

  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  paymentResultId Int?           @map("payment_result_id")
  paymentResult   PaymentResult? @relation(fields: [paymentResultId], references: [id])

  countryNationalityId Int?                @map("country_nationality_id")
  countryNationality   CountryNationality? @relation(fields: [countryNationalityId], references: [id])

  productTypeId Int?         @map("product_type_id")
  productType   ProductType? @relation(fields: [productTypeId], references: [id])

  promoCodeId Int?       @map("promo_code_id")
  promoCode   Promocode? @relation(fields: [promoCodeId], references: [id])

  @@map("quote")
}

model ProductType {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  Quote        Quote[]
  Company      Company[]
  VehicleMake  VehicleMake[]
  VehicleModel VehicleModel[]

  @@map("product_type")
}

model PersonalInfo {
  id                 Int           @id @default(autoincrement())
  phone              String?
  email              String?
  name               String?
  gender             String?
  nric               String?
  maritalStatus      String?
  dateOfBirth        String?        @map("date_of_birth")
  address            String?
  vehicleMake        String?        @map("vehicle_make")
  vehicleModel       String?        @map("vehicle_model")
  yearOfRegistration String?        @map("year_of_registration")
  vehicles           Json
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  quotes             Quote[]

  @@map("personal_info")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  quotes    Quote[]

  productTypeId Int?         @map("product_type_id")
  productType   ProductType? @relation(fields: [productTypeId], references: [id])

  @@map("company")
}

model PaymentResult {
  id        Int      @id @default(autoincrement())
  policyId  String   @map("policy_id")
  policyNo  String   @map("policy_no")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  quotes    Quote[]

  @@map("payment_result")
}

model CountryNationality {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quotes Quote[]

  @@map("country_nationality")
}

model RequestLog {
  id          Int      @id @default(autoincrement())
  ip          String
  productType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  @@map("request_log")
}

model VehicleMake {
  id        Int    @id @default(autoincrement())
  name      String
  groupName String? @map("group_name")

  // Foreign Keys
  productTypeId Int?         @map("product_type_id")
  productType   ProductType? @relation(fields: [productTypeId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  VehicleModel VehicleModel[]

  @@map("vehicle_make")
}

model VehicleModel {
  id        Int    @id @default(autoincrement())
  name      String
  groupName String? @map("group_name")

  // Foreign Keys
  vehicleMakeId Int?         @map("vehicle_make_id")
  vehicleMake   VehicleMake? @relation(fields: [vehicleMakeId], references: [id])

  productTypeId Int?         @map("product_type_id")
  productType   ProductType? @relation(fields: [productTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("vehicle_model")
}
